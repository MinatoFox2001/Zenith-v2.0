from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import BotConfig
import logging

logger = logging.getLogger(__name__)

class AdminManager:
    def __init__(self, database):
        self.database = database
        self.admin_ids = BotConfig().admin_ids

    def is_admin(self, user: types.User) -> bool:
        result = user.id in self.admin_ids
        logger.info(f"Checking admin status for user {user.id} ({user.username}): {result}")
        return result

    def get_admin_keyboard(self):
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞")],
                [KeyboardButton(text="üîô –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )

    async def show_all_users(self, message: types.Message, message_manager, reply_markup=None):
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message_manager.delete_previous_message(message.from_user.id)
            
            users = await self.database.get_all_users()
            
            if not users:
                await message_manager.send_or_edit_message(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    text="üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    reply_markup=reply_markup
                )
                return
            
            users_text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for i, user in enumerate(users, 1):
                users_text += f"{i}. {user['first_name']}"
                if user['last_name']:
                    users_text += f" {user['last_name']}"
                if user['username']:
                    users_text += f" (@{user['username']})"
                users_text += f" - ID: {user['user_id']}\n"
                users_text += f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user['state']}\n"
                users_text += f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(users_text) > 4000:
                parts = [users_text[i:i+4000] for i in range(0, len(users_text), 4000)]
                for i, part in enumerate(parts):
                    if i == len(parts) - 1:
                        await message_manager.send_or_edit_message(
                            chat_id=message.chat.id,
                            user_id=message.from_user.id,
                            text=part,
                            reply_markup=reply_markup
                        )
                    else:
                        await message_manager.send_or_edit_message(
                            chat_id=message.chat.id,
                            user_id=message.from_user.id,
                            text=part
                        )
            else:
                await message_manager.send_or_edit_message(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    text=users_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"Error showing users: {e}")
            await message_manager.send_or_edit_message(
                chat_id=message.chat.id,
                user_id=message.from_user.id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=reply_markup
            )

    async def show_admin_stats(self, message: types.Message, message_manager, reply_markup=None):
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message_manager.delete_previous_message(message.from_user.id)
            
            users = await self.database.get_all_users()
            users_count = await self.database.get_users_count()
            
            stats_text = f"""
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞:
            
            üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
            """
            
            if users:
                stats_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {users[0]['created_at'].strftime('%d.%m.%Y %H:%M')}"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
                state_stats = {}
                for user in users:
                    state = user['state']
                    state_stats[state] = state_stats.get(state, 0) + 1
                
                stats_text += "\n\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:"
                
                for state, count in state_stats.items():
                    stats_text += f"\n‚Ä¢ {state}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
                stats_text += "\n\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
                
                for i, user in enumerate(users[:5], 1):
                    stats_text += f"\n{i}. {user['first_name']} (@{user['username'] or '–Ω–µ—Ç username'}) - {user['state']}"
            
            await message_manager.send_or_edit_message(
                chat_id=message.chat.id,
                user_id=message.from_user.id,
                text=stats_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error showing stats: {e}")
            await message_manager.send_or_edit_message(
                chat_id=message.chat.id,
                user_id=message.from_user.id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                reply_markup=reply_markup
            )

    async def back_to_main_menu(self, message: types.Message, message_manager):
        from database import UserState
        await self.database.set_user_state(message.from_user.id, UserState.MAIN)
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_manager.clear_user_messages(message.from_user.id)