from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
from decimal import Decimal

logger = logging.getLogger(__name__)

class BalanceManager:
    def __init__(self, database):
        self.database = database

    def get_balance_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_deposit")],
                [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="balance_history")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]
            ]
        )

    def get_deposit_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–æ–Ω—É—Å—ã", callback_data="deposit_bonus")],
                [InlineKeyboardButton(text="üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ä—É–±–ª–∏", callback_data="deposit_rubles")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance_back")]
            ]
        )

    async def show_balance(self, user_id: int, chat_id: int, message_manager):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            bonus_balance = await self.database.get_balance(user_id, 'bonus')
            rubles_balance = await self.database.get_balance(user_id, 'rubles')
            
            balance_text = f"""
            üí∞ –í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:

            üíé –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã: {bonus_balance:.2f}
            üíµ –†—É–±–ª–∏: {rubles_balance:.2f}

            üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π.
            """
            
            await message_manager.send_or_edit_message(
                chat_id=chat_id,
                user_id=user_id,
                text=balance_text,
                reply_markup=self.get_balance_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error showing balance: {e}")
            await message_manager.send_or_edit_message(
                chat_id=chat_id,
                user_id=user_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"
            )

    async def deposit_balance(self, user_id: int, balance_type: str, amount: float, description: str = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
        """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            new_balance = await self.database.update_balance(
                user_id=user_id,
                balance_type=balance_type,
                amount=amount,
                transaction_type='deposit',
                description=description
            )
            return new_balance
        except Exception as e:
            logger.error(f"Error depositing balance: {e}")
            raise

    async def withdraw_balance(self, user_id: int, balance_type: str, amount: float, description: str = "–°–ø–∏—Å–∞–Ω–∏–µ"):
        """–°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞"""
        try:
            current_balance = await self.database.get_balance(user_id, balance_type)
            if current_balance < amount:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            
            new_balance = await self.database.update_balance(
                user_id=user_id,
                balance_type=balance_type,
                amount=-amount,
                transaction_type='withdraw',
                description=description
            )
            return new_balance
        except Exception as e:
            logger.error(f"Error withdrawing balance: {e}")
            raise

    async def transfer_balance(self, from_user_id: int, to_user_id: int, balance_type: str, amount: float, description: str = "–ü–µ—Ä–µ–≤–æ–¥"):
        """–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_balance = await self.database.get_balance(from_user_id, balance_type)
            if from_balance < amount:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with self.database.pool.acquire() as connection:
                async with connection.transaction():
                    # –°–ø–∏—Å–∞–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    await self.database.update_balance(
                        user_id=from_user_id,
                        balance_type=balance_type,
                        amount=-amount,
                        transaction_type='transfer',
                        description=f"–ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id}: {description}"
                    )
                    
                    # –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                    await self.database.update_balance(
                        user_id=to_user_id,
                        balance_type=balance_type,
                        amount=amount,
                        transaction_type='transfer',
                        description=f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_user_id}: {description}"
                    )
            
            return True
        except Exception as e:
            logger.error(f"Error transferring balance: {e}")
            raise

    async def show_transaction_history(self, user_id: int, chat_id: int, message_manager, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            transactions = await self.database.get_transaction_history(user_id, limit)
            
            if not transactions:
                history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞."
            else:
                history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
                
                for i, transaction in enumerate(transactions, 1):
                    amount = transaction['amount']
                    sign = "+" if amount > 0 else ""
                    type_emoji = "‚¨ÜÔ∏è" if amount > 0 else "‚¨áÔ∏è"
                    
                    history_text += (
                        f"{i}. {type_emoji} {transaction['balance_type']}: {sign}{amount:.2f}\n"
                        f"   –¢–∏–ø: {transaction['transaction_type']}\n"
                        f"   –î–∞—Ç–∞: {transaction['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                    )
                    
                    if transaction['description']:
                        history_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {transaction['description']}\n"
                    
                    history_text += "\n"
            
            await message_manager.send_or_edit_message(
                chat_id=chat_id,
                user_id=user_id,
                text=history_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance_back")]]
                )
            )
            
        except Exception as e:
            logger.error(f"Error showing transaction history: {e}")
            await message_manager.send_or_edit_message(
                chat_id=chat_id,
                user_id=user_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"
            )