# main.py
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import BotConfig, DatabaseConfig
from database import Database, UserState
from middleware import UserStateMiddleware
from admin_manager import AdminManager
import logging

logging.basicConfig(level=logging.INFO)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    bot_config = BotConfig()
    db_config = DatabaseConfig()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database = Database(db_config)
    await database.connect()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_manager = AdminManager(database)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=bot_config.token)
    dp = Dispatcher()
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.middleware(UserStateMiddleware(database))
    dp.callback_query.middleware(UserStateMiddleware(database))
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    def get_main_inline_keyboard(is_admin: bool = False):
        keyboard = [
            [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")]
        ]
    
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if is_admin:
            keyboard.insert(0, [InlineKeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_personal_cabinet_keyboard():
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
    
    def get_back_to_main_keyboard():
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
    
    def get_back_to_cabinet_keyboard():
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_cabinet")]
            ]
        )
    
    def get_admin_main_keyboard():
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞", callback_data="admin_stats")],
                [InlineKeyboardButton(text="üîô –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_to_main")]
            ]
        )
    
    def get_admin_back_keyboard():
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back_to_main_menu")]
            ]
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message, user_state: UserState):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await database.add_user(
            user_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name or "",
            username=message.from_user.username or ""
        )
        
        is_admin_user = admin_manager.is_admin(message.from_user)
        welcome_message = await get_welcome_message(message.from_user, is_admin_user)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ is_admin –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(welcome_message, reply_markup=get_main_inline_keyboard(is_admin_user))

    async def get_welcome_message(user: types.User, is_admin_user: bool = False) -> str:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await database.get_users_count()
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º username
        user_name = user.first_name or "–¥—Ä—É–≥"
            
        welcome_text = f"""
        üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n–Ø Zenith - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á.

        üöÄ –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:
        ‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã
        ‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  
        ‚Ä¢ –ü–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏
        ‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É

        üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–≤–µ—Ä—è—é—Ç –º–Ω–µ: {users_count}
                
        üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è!
            """
            
        if is_admin_user:
            welcome_text += "\n\n‚ö° –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –î–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /admin"
            
        return welcome_text

    # –ö–æ–º–∞–Ω–¥–∞ /admin
    @dp.message(Command("admin"))
    async def cmd_admin(message: types.Message, user_state: UserState):
        if not admin_manager.is_admin(message.from_user):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await database.set_user_state(message.from_user.id, UserState.ADMIN)
        
        admin_text = """
        üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        
        –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
        ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!
        """
        await message.answer(admin_text, reply_markup=get_admin_main_keyboard())

    # –ö–æ–º–∞–Ω–¥–∞ /users
    @dp.message(Command("users"))
    async def cmd_users(message: types.Message, user_state: UserState):
        if not admin_manager.is_admin(message.from_user):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        await admin_manager.show_all_users(message, get_admin_back_keyboard())

    # –ö–æ–º–∞–Ω–¥–∞ /stats
    @dp.message(Command("stats"))
    async def cmd_stats(message: types.Message, user_state: UserState):
        if not admin_manager.is_admin(message.from_user):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
        
        await admin_manager.show_admin_stats(message, get_admin_back_keyboard())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    @dp.message(Command("help"))
    async def cmd_help(message: types.Message, user_state: UserState):
        help_text = """
                    ü§ñ Zenith - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫

                    üìã –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
                    ‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                    ‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                    ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                    ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

                    ‚å®Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                    /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                    /help - –ø–æ–º–æ—â—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    /info - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    /ask [–≤–æ–ø—Ä–æ—Å] - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å

                    üéõÔ∏è –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏!
                        """
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if admin_manager.is_admin(message.from_user):
            help_text += "\n\nüõ†Ô∏è –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n/admin - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        
        await message.answer(help_text)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    @dp.message(Command("info"))
    async def cmd_info(message: types.Message, user_state: UserState):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = await database.get_user(message.from_user.id)
        
        if user_data:
            info_text = f"""
            üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö):
            
            ID: {user_data['user_id']}
            –ò–º—è: {user_data['first_name']}
            –§–∞–º–∏–ª–∏—è: {user_data['last_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            Username: @{user_data['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
            –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user_data['state']}
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['created_at']}
            """
        else:
            info_text = f"""
            üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:
            
            ID: {message.from_user.id}
            –ò–º—è: {message.from_user.first_name}
            –§–∞–º–∏–ª–∏—è: {message.from_user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            Username: @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
            """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        if admin_manager.is_admin(message.from_user):
            info_text += "\n\n‚≠ê –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞"
        
        await message.answer(info_text)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    @dp.callback_query()
    async def handle_inline_buttons(callback_query: types.CallbackQuery, user_state: UserState):
        data = callback_query.data
        
        if data == "personal_cabinet":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_data = await database.get_user(callback_query.from_user.id)
            
            cabinet_text = f"""
            üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            
            üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
            ID: {callback_query.from_user.id}
            –ò–º—è: {callback_query.from_user.first_name}
            –§–∞–º–∏–ª–∏—è: {callback_query.from_user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            Username: @{callback_query.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
            """
            
            if user_data:
                cabinet_text += f"""
            –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user_data['state']}
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['created_at'].strftime('%d.%m.%Y %H:%M')}
                """
            
            if admin_manager.is_admin(callback_query.from_user):
                cabinet_text += "\n\n‚≠ê –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞"
            
            await callback_query.message.answer(cabinet_text, reply_markup=get_personal_cabinet_keyboard())
            
        elif data == "user_stats":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users = await database.get_all_users()
            users_count = await database.get_users_count()
            
            stats_text = f"""
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            
            üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
            """
            
            if users:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
                state_stats = {}
                for user in users:
                    state = user['state']
                    state_stats[state] = state_stats.get(state, 0) + 1
                
                stats_text += "\n\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º:"
                
                for state, count in state_stats.items():
                    stats_text += f"\n‚Ä¢ {state}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                
                stats_text += "\n\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
                
                for i, user in enumerate(users[:5], 1):
                    stats_text += f"\n{i}. {user['first_name']} (@{user['username'] or '–Ω–µ—Ç username'}) - {user['state']}"
            
            await callback_query.message.answer(stats_text, reply_markup=get_back_to_cabinet_keyboard())
            
        elif data == "about_project":
            about_text = "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ\n\n–ü–æ–∑–∂–µ —Ç—É—Ç –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"
            await callback_query.message.answer(about_text, reply_markup=get_back_to_main_keyboard())
            
        elif data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            is_admin_user = admin_manager.is_admin(callback_query.from_user)
            welcome_message = await get_welcome_message(callback_query.from_user, is_admin_user)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
            await callback_query.message.answer(welcome_message, 
                                            reply_markup=get_main_inline_keyboard(is_admin_user))
            
        elif data == "back_to_cabinet":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            user_data = await database.get_user(callback_query.from_user.id)
            
            cabinet_text = f"""
            üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            
            üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
            ID: {callback_query.from_user.id}
            –ò–º—è: {callback_query.from_user.first_name}
            –§–∞–º–∏–ª–∏—è: {callback_query.from_user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            Username: @{callback_query.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
            """
            
            if user_data:
                cabinet_text += f"""
            –°–æ—Å—Ç–æ—è–Ω–∏–µ: {user_data['state']}
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data['created_at'].strftime('%d.%m.%Y %H:%M')}
                """
            
            if admin_manager.is_admin(callback_query.from_user):
                cabinet_text += "\n\n‚≠ê –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞"
            
            await callback_query.message.answer(cabinet_text, reply_markup=get_personal_cabinet_keyboard())
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        elif data == "admin_all_users":
            if not admin_manager.is_admin(callback_query.from_user):
                await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            await admin_manager.show_all_users(callback_query.message, get_admin_back_keyboard())
            
        elif data == "admin_stats":
            if not admin_manager.is_admin(callback_query.from_user):
                await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            await admin_manager.show_admin_stats(callback_query.message, get_admin_back_keyboard())
            
        elif data == "admin_back_to_main":
            if not admin_manager.is_admin(callback_query.from_user):
                await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await database.set_user_state(callback_query.from_user.id, UserState.MAIN)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
            is_admin_user = admin_manager.is_admin(callback_query.from_user)
            welcome_message = await get_welcome_message(callback_query.from_user, is_admin_user)
            
            # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º is_admin_user –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback_query.message.answer(welcome_message, 
                                            reply_markup=get_main_inline_keyboard(is_admin_user))
            
        elif data == "admin_back_to_main_menu":
            if not admin_manager.is_admin(callback_query.from_user):
                await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
            admin_text = """
            üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
            ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
            
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!
            """
            await callback_query.message.answer(admin_text, reply_markup=get_admin_main_keyboard())
        elif data == "admin_panel":
            if not admin_manager.is_admin(callback_query.from_user):
                await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await database.set_user_state(callback_query.from_user.id, UserState.ADMIN)
            
            admin_text = """
            üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
            ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
            
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!
            """
            await callback_query.message.answer(admin_text, reply_markup=get_admin_main_keyboard())
        
        await callback_query.answer()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    @dp.message()
    async def echo_message(message: types.Message, user_state: UserState):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if message.text.startswith('/'):
            return
            
        if user_state == UserState.MAIN:
            await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message.text}")
        else:
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await database.close()
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())